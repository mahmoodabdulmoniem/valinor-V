/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import assert from 'assert';
import { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';
import { lengthAdd, lengthDiffNonNegative, lengthToObj, toLength } from '../../../../common/model/bracketPairsTextModelPart/bracketPairsTree/length.js';
suite('Bracket Pair Colorizer - Length', () => {
    ensureNoDisposablesAreLeakedInTestSuite();
    function toStr(length) {
        return lengthToObj(length).toString();
    }
    test('Basic', () => {
        const l1 = toLength(100, 10);
        assert.strictEqual(lengthToObj(l1).lineCount, 100);
        assert.strictEqual(lengthToObj(l1).columnCount, 10);
        assert.deepStrictEqual(toStr(lengthAdd(l1, toLength(100, 10))), '200,10');
        assert.deepStrictEqual(toStr(lengthAdd(l1, toLength(0, 10))), '100,20');
    });
    test('lengthDiffNonNeg', () => {
        assert.deepStrictEqual(toStr(lengthDiffNonNegative(toLength(100, 10), toLength(100, 20))), '0,10');
        assert.deepStrictEqual(toStr(lengthDiffNonNegative(toLength(100, 10), toLength(101, 20))), '1,20');
        assert.deepStrictEqual(toStr(lengthDiffNonNegative(toLength(101, 30), toLength(101, 20))), '0,0');
        assert.deepStrictEqual(toStr(lengthDiffNonNegative(toLength(102, 10), toLength(101, 20))), '0,0');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVuZ3RoLnRlc3QuanMiLCJzb3VyY2VSb290IjoiZmlsZTovLy9Vc2Vycy9tYWhtb29kYWJkdWxtb25pZW0vRGVza3RvcC92YWxpbm9yLVYvdnNjb2RlL3NyYy8iLCJzb3VyY2VzIjpbInZzL2VkaXRvci90ZXN0L2NvbW1vbi9tb2RlbC9icmFja2V0UGFpckNvbG9yaXplci9sZW5ndGgudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O2dHQUdnRztBQUVoRyxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFFLHVDQUF1QyxFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDbkcsT0FBTyxFQUFVLFNBQVMsRUFBRSxxQkFBcUIsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sK0VBQStFLENBQUM7QUFFaEssS0FBSyxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtJQUU3Qyx1Q0FBdUMsRUFBRSxDQUFDO0lBRTFDLFNBQVMsS0FBSyxDQUFDLE1BQWM7UUFDNUIsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVELElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1FBQ2xCLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVwRCxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzFFLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDekUsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO1FBQzdCLE1BQU0sQ0FBQyxlQUFlLENBQ3JCLEtBQUssQ0FDSixxQkFBcUIsQ0FDcEIsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFDakIsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUNuQixFQUNELE1BQU0sQ0FDTixDQUFDO1FBRUYsTUFBTSxDQUFDLGVBQWUsQ0FDckIsS0FBSyxDQUNKLHFCQUFxQixDQUNwQixRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUNqQixRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQ25CLEVBQ0QsTUFBTSxDQUNOLENBQUM7UUFFRixNQUFNLENBQUMsZUFBZSxDQUNyQixLQUFLLENBQ0oscUJBQXFCLENBQ3BCLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQ2pCLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FDbkIsRUFDRCxLQUFLLENBQ0wsQ0FBQztRQUVGLE1BQU0sQ0FBQyxlQUFlLENBQ3JCLEtBQUssQ0FDSixxQkFBcUIsQ0FDcEIsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFDakIsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUNuQixFQUNELEtBQUssQ0FDTCxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQyJ9
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import assert from 'assert';
import { CancellationToken } from '../../../../../base/common/cancellation.js';
import { Event } from '../../../../../base/common/event.js';
import { DisposableStore } from '../../../../../base/common/lifecycle.js';
import { URI } from '../../../../../base/common/uri.js';
import { Position } from '../../../../common/core/position.js';
import { Range } from '../../../../common/core/range.js';
import { ILanguageConfigurationService } from '../../../../common/languages/languageConfigurationRegistry.js';
import { IModelService } from '../../../../common/services/model.js';
import { BracketSelectionRangeProvider } from '../../browser/bracketSelections.js';
import { provideSelectionRanges } from '../../browser/smartSelect.js';
import { WordSelectionRangeProvider } from '../../browser/wordSelections.js';
import { createModelServices } from '../../../../test/common/testTextModel.js';
import { javascriptOnEnterRules } from '../../../../test/common/modes/supports/onEnterRules.js';
import { LanguageFeatureRegistry } from '../../../../common/languageFeatureRegistry.js';
import { ILanguageService } from '../../../../common/languages/language.js';
import { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';
class StaticLanguageSelector {
    constructor(languageId) {
        this.languageId = languageId;
        this.onDidChange = Event.None;
    }
}
suite('SmartSelect', () => {
    const OriginalBracketSelectionRangeProviderMaxDuration = BracketSelectionRangeProvider._maxDuration;
    suiteSetup(() => {
        BracketSelectionRangeProvider._maxDuration = 5000; // 5 seconds
    });
    suiteTeardown(() => {
        BracketSelectionRangeProvider._maxDuration = OriginalBracketSelectionRangeProviderMaxDuration;
    });
    const languageId = 'mockJSMode';
    let disposables;
    let modelService;
    const providers = new LanguageFeatureRegistry();
    setup(() => {
        disposables = new DisposableStore();
        const instantiationService = createModelServices(disposables);
        modelService = instantiationService.get(IModelService);
        const languagConfigurationService = instantiationService.get(ILanguageConfigurationService);
        const languageService = instantiationService.get(ILanguageService);
        disposables.add(languageService.registerLanguage({ id: languageId }));
        disposables.add(languagConfigurationService.register(languageId, {
            brackets: [
                ['(', ')'],
                ['{', '}'],
                ['[', ']']
            ],
            onEnterRules: javascriptOnEnterRules,
            wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\#\$\%\^\&\*\(\)\=\+\[\{\]\}\\\;\:\'\"\,\.\<\>\/\?\s]+)/g
        }));
    });
    teardown(() => {
        disposables.dispose();
    });
    ensureNoDisposablesAreLeakedInTestSuite();
    async function assertGetRangesToPosition(text, lineNumber, column, ranges, selectLeadingAndTrailingWhitespace = true) {
        const uri = URI.file('test.js');
        const model = modelService.createModel(text.join('\n'), new StaticLanguageSelector(languageId), uri);
        const [actual] = await provideSelectionRanges(providers, model, [new Position(lineNumber, column)], { selectLeadingAndTrailingWhitespace, selectSubwords: true }, CancellationToken.None);
        const actualStr = actual.map(r => new Range(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn).toString());
        const desiredStr = ranges.reverse().map(r => String(r));
        assert.deepStrictEqual(actualStr, desiredStr, `\nA: ${actualStr} VS \nE: ${desiredStr}`);
        modelService.destroyModel(uri);
    }
    test('getRangesToPosition #1', () => {
        return assertGetRangesToPosition([
            'function a(bar, foo){',
            '\tif (bar) {',
            '\t\treturn (bar + (2 * foo))',
            '\t}',
            '}'
        ], 3, 20, [
            new Range(1, 1, 5, 2), // all
            new Range(1, 21, 5, 2), // {} outside
            new Range(1, 22, 5, 1), // {} inside
            new Range(2, 1, 4, 3), // block
            new Range(2, 1, 4, 3),
            new Range(2, 2, 4, 3),
            new Range(2, 11, 4, 3),
            new Range(2, 12, 4, 2),
            new Range(3, 1, 3, 27), // line w/ triva
            new Range(3, 3, 3, 27), // line w/o triva
            new Range(3, 10, 3, 27), // () outside
            new Range(3, 11, 3, 26), // () inside
            new Range(3, 17, 3, 26), // () outside
            new Range(3, 18, 3, 25), // () inside
        ]);
    });
    test('config: selectLeadingAndTrailingWhitespace', async () => {
        await assertGetRangesToPosition([
            'aaa',
            '\tbbb',
            ''
        ], 2, 3, [
            new Range(1, 1, 3, 1), // all
            new Range(2, 1, 2, 5), // line w/ triva
            new Range(2, 2, 2, 5), // bbb
        ], true);
        await assertGetRangesToPosition([
            'aaa',
            '\tbbb',
            ''
        ], 2, 3, [
            new Range(1, 1, 3, 1), // all
            new Range(2, 2, 2, 5), // () inside
        ], false);
    });
    test('getRangesToPosition #56886. Skip empty lines correctly.', () => {
        return assertGetRangesToPosition([
            'function a(bar, foo){',
            '\tif (bar) {',
            '',
            '\t}',
            '}'
        ], 3, 1, [
            new Range(1, 1, 5, 2),
            new Range(1, 21, 5, 2),
            new Range(1, 22, 5, 1),
            new Range(2, 1, 4, 3),
            new Range(2, 1, 4, 3),
            new Range(2, 2, 4, 3),
            new Range(2, 11, 4, 3),
            new Range(2, 12, 4, 2),
        ]);
    });
    test('getRangesToPosition #56886. Do not skip lines with only whitespaces.', () => {
        return assertGetRangesToPosition([
            'function a(bar, foo){',
            '\tif (bar) {',
            ' ',
            '\t}',
            '}'
        ], 3, 1, [
            new Range(1, 1, 5, 2), // all
            new Range(1, 21, 5, 2), // {} outside
            new Range(1, 22, 5, 1), // {} inside
            new Range(2, 1, 4, 3),
            new Range(2, 1, 4, 3),
            new Range(2, 2, 4, 3),
            new Range(2, 11, 4, 3),
            new Range(2, 12, 4, 2),
            new Range(3, 1, 3, 2), // block
            new Range(3, 1, 3, 2) // empty line
        ]);
    });
    test('getRangesToPosition #40658. Cursor at first position inside brackets should select line inside.', () => {
        return assertGetRangesToPosition([
            ' [ ]',
            ' { } ',
            '( ) '
        ], 2, 3, [
            new Range(1, 1, 3, 5),
            new Range(2, 1, 2, 6), // line w/ triava
            new Range(2, 2, 2, 5), // {} inside, line w/o triva
            new Range(2, 3, 2, 4) // {} inside
        ]);
    });
    test('getRangesToPosition #40658. Cursor in empty brackets should reveal brackets first.', () => {
        return assertGetRangesToPosition([
            ' [] ',
            ' { } ',
            '  ( ) '
        ], 1, 3, [
            new Range(1, 1, 3, 7), // all
            new Range(1, 1, 1, 5), // line w/ trival
            new Range(1, 2, 1, 4), // [] outside, line w/o trival
            new Range(1, 3, 1, 3), // [] inside
        ]);
    });
    test('getRangesToPosition #40658. Tokens before bracket will be revealed first.', () => {
        return assertGetRangesToPosition([
            '  [] ',
            ' { } ',
            'selectthis( ) '
        ], 3, 11, [
            new Range(1, 1, 3, 15), // all
            new Range(3, 1, 3, 15), // line w/ trivia
            new Range(3, 1, 3, 14), // line w/o trivia
            new Range(3, 1, 3, 11) // word
        ]);
    });
    // -- bracket selections
    async function assertRanges(provider, value, ...expected) {
        const index = value.indexOf('|');
        value = value.replace('|', ''); // CodeQL [SM02383] js/incomplete-sanitization this is purpose only the first | character
        const model = modelService.createModel(value, new StaticLanguageSelector(languageId), URI.parse('fake:lang'));
        const pos = model.getPositionAt(index);
        const all = await provider.provideSelectionRanges(model, [pos], CancellationToken.None);
        const ranges = all[0];
        modelService.destroyModel(model.uri);
        assert.strictEqual(expected.length, ranges.length);
        for (const range of ranges) {
            const exp = expected.shift() || null;
            assert.ok(Range.equalsRange(range.range, exp), `A=${range.range} <> E=${exp}`);
        }
    }
    test('bracket selection', async () => {
        await assertRanges(new BracketSelectionRangeProvider(), '(|)', new Range(1, 2, 1, 2), new Range(1, 1, 1, 3));
        await assertRanges(new BracketSelectionRangeProvider(), '[[[](|)]]', new Range(1, 6, 1, 6), new Range(1, 5, 1, 7), // ()
        new Range(1, 3, 1, 7), new Range(1, 2, 1, 8), // [[]()]
        new Range(1, 2, 1, 8), new Range(1, 1, 1, 9));
        await assertRanges(new BracketSelectionRangeProvider(), '[a[](|)a]', new Range(1, 6, 1, 6), new Range(1, 5, 1, 7), new Range(1, 2, 1, 8), new Range(1, 1, 1, 9));
        // no bracket
        await assertRanges(new BracketSelectionRangeProvider(), 'fofof|fofo');
        // empty
        await assertRanges(new BracketSelectionRangeProvider(), '[[[]()]]|');
        await assertRanges(new BracketSelectionRangeProvider(), '|[[[]()]]');
        // edge
        await assertRanges(new BracketSelectionRangeProvider(), '[|[[]()]]', new Range(1, 2, 1, 8), new Range(1, 1, 1, 9));
        await assertRanges(new BracketSelectionRangeProvider(), '[[[]()]|]', new Range(1, 2, 1, 8), new Range(1, 1, 1, 9));
        await assertRanges(new BracketSelectionRangeProvider(), 'aaa(aaa)bbb(b|b)ccc(ccc)', new Range(1, 13, 1, 15), new Range(1, 12, 1, 16));
        await assertRanges(new BracketSelectionRangeProvider(), '(aaa(aaa)bbb(b|b)ccc(ccc))', new Range(1, 14, 1, 16), new Range(1, 13, 1, 17), new Range(1, 2, 1, 25), new Range(1, 1, 1, 26));
    });
    test('bracket with leading/trailing', async () => {
        await assertRanges(new BracketSelectionRangeProvider(), 'for(a of b){\n  foo(|);\n}', new Range(2, 7, 2, 7), new Range(2, 6, 2, 8), new Range(1, 13, 3, 1), new Range(1, 12, 3, 2), new Range(1, 1, 3, 2), new Range(1, 1, 3, 2));
        await assertRanges(new BracketSelectionRangeProvider(), 'for(a of b)\n{\n  foo(|);\n}', new Range(3, 7, 3, 7), new Range(3, 6, 3, 8), new Range(2, 2, 4, 1), new Range(2, 1, 4, 2), new Range(1, 1, 4, 2), new Range(1, 1, 4, 2));
    });
    test('in-word ranges', async () => {
        await assertRanges(new WordSelectionRangeProvider(), 'f|ooBar', new Range(1, 1, 1, 4), // foo
        new Range(1, 1, 1, 7), // fooBar
        new Range(1, 1, 1, 7));
        await assertRanges(new WordSelectionRangeProvider(), 'f|oo_Ba', new Range(1, 1, 1, 4), new Range(1, 1, 1, 7), new Range(1, 1, 1, 7));
        await assertRanges(new WordSelectionRangeProvider(), 'f|oo-Ba', new Range(1, 1, 1, 4), new Range(1, 1, 1, 7), new Range(1, 1, 1, 7));
    });
    test('in-word ranges with selectSubwords=false', async () => {
        await assertRanges(new WordSelectionRangeProvider(false), 'f|ooBar', new Range(1, 1, 1, 7), new Range(1, 1, 1, 7));
        await assertRanges(new WordSelectionRangeProvider(false), 'f|oo_Ba', new Range(1, 1, 1, 7), new Range(1, 1, 1, 7));
        await assertRanges(new WordSelectionRangeProvider(false), 'f|oo-Ba', new Range(1, 1, 1, 7), new Range(1, 1, 1, 7));
    });
    test('Default selection should select current word/hump first in camelCase #67493', async function () {
        await assertRanges(new WordSelectionRangeProvider(), 'Abs|tractSmartSelect', new Range(1, 1, 1, 9), new Range(1, 1, 1, 20), new Range(1, 1, 1, 20));
        await assertRanges(new WordSelectionRangeProvider(), 'AbstractSma|rtSelect', new Range(1, 9, 1, 14), new Range(1, 1, 1, 20), new Range(1, 1, 1, 20));
        await assertRanges(new WordSelectionRangeProvider(), 'Abstrac-Sma|rt-elect', new Range(1, 9, 1, 14), new Range(1, 1, 1, 20), new Range(1, 1, 1, 20));
        await assertRanges(new WordSelectionRangeProvider(), 'Abstrac_Sma|rt_elect', new Range(1, 9, 1, 14), new Range(1, 1, 1, 20), new Range(1, 1, 1, 20));
        await assertRanges(new WordSelectionRangeProvider(), 'Abstrac_Sma|rt-elect', new Range(1, 9, 1, 14), new Range(1, 1, 1, 20), new Range(1, 1, 1, 20));
        await assertRanges(new WordSelectionRangeProvider(), 'Abstrac_Sma|rtSelect', new Range(1, 9, 1, 14), new Range(1, 1, 1, 20), new Range(1, 1, 1, 20));
    });
    test('Smart select: only add line ranges if they\'re contained by the next range #73850', async function () {
        const reg = providers.register('*', {
            provideSelectionRanges() {
                return [[
                        { range: { startLineNumber: 1, startColumn: 10, endLineNumber: 1, endColumn: 11 } },
                        { range: { startLineNumber: 1, startColumn: 10, endLineNumber: 3, endColumn: 2 } },
                        { range: { startLineNumber: 1, startColumn: 1, endLineNumber: 3, endColumn: 2 } },
                    ]];
            }
        });
        await assertGetRangesToPosition(['type T = {', '\tx: number', '}'], 1, 10, [
            new Range(1, 1, 3, 2), // all
            new Range(1, 10, 3, 2), // { ... }
            new Range(1, 10, 1, 11), // {
        ]);
        reg.dispose();
    });
    test('Expand selection in words with underscores is inconsistent #90589', async function () {
        await assertRanges(new WordSelectionRangeProvider(), 'Hel|lo_World', new Range(1, 1, 1, 6), new Range(1, 1, 1, 12), new Range(1, 1, 1, 12));
        await assertRanges(new WordSelectionRangeProvider(), 'Hello_Wo|rld', new Range(1, 7, 1, 12), new Range(1, 1, 1, 12), new Range(1, 1, 1, 12));
        await assertRanges(new WordSelectionRangeProvider(), 'Hello|_World', new Range(1, 1, 1, 6), new Range(1, 1, 1, 12), new Range(1, 1, 1, 12));
        await assertRanges(new WordSelectionRangeProvider(), 'Hello_|World', new Range(1, 7, 1, 12), new Range(1, 1, 1, 12), new Range(1, 1, 1, 12));
        await assertRanges(new WordSelectionRangeProvider(), 'Hello|-World', new Range(1, 1, 1, 6), new Range(1, 1, 1, 12), new Range(1, 1, 1, 12));
        await assertRanges(new WordSelectionRangeProvider(), 'Hello-|World', new Range(1, 7, 1, 12), new Range(1, 1, 1, 12), new Range(1, 1, 1, 12));
        await assertRanges(new WordSelectionRangeProvider(), 'Hello|World', new Range(1, 6, 1, 11), new Range(1, 1, 1, 11), new Range(1, 1, 1, 11));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRTZWxlY3QudGVzdC5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi8vL1VzZXJzL21haG1vb2RhYmR1bG1vbmllbS9EZXNrdG9wL3ZhbGlub3ItVi92c2NvZGUvc3JjLyIsInNvdXJjZXMiOlsidnMvZWRpdG9yL2NvbnRyaWIvc21hcnRTZWxlY3QvdGVzdC9icm93c2VyL3NtYXJ0U2VsZWN0LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztnR0FHZ0c7QUFDaEcsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBQzVCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDMUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUMvRCxPQUFPLEVBQVUsS0FBSyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFakUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sK0RBQStELENBQUM7QUFDOUcsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQ2hHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQ3hGLE9BQU8sRUFBc0Is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QUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxTQUFTO1FBQ3ZELElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUM1QyxDQUFDO1FBRUYsTUFBTSxZQUFZLENBQUMsSUFBSSw2QkFBNkIsRUFBRSxFQUFFLFdBQVcsRUFDbEUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQzVDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUM1QyxDQUFDO1FBRUYsYUFBYTtRQUNiLE1BQU0sWUFBWSxDQUFDLElBQUksNkJBQTZCLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUV0RSxRQUFRO1FBQ1IsTUFBTSxZQUFZLENBQUMsSUFBSSw2QkFBNkIsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sWUFBWSxDQUFDLElBQUksNkJBQTZCLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUVyRSxPQUFPO1FBQ1AsTUFBTSxZQUFZLENBQUMsSUFBSSw2QkFBNkIsRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25ILE1BQU0sWUFBWSxDQUFDLElBQUksNkJBQTZCLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVuSCxNQUFNLFlBQVksQ0FBQyxJQUFJLDZCQUE2QixFQUFFLEVBQUUsMEJBQTBCLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0SSxNQUFNLFlBQVksQ0FBQyxJQUFJLDZCQUE2QixFQUFFLEVBQUUsNEJBQTRCLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6TCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywrQkFBK0IsRUFBRSxLQUFLLElBQUksRUFBRTtRQUVoRCxNQUFNLFlBQVksQ0FBQyxJQUFJLDZCQUE2QixFQUFFLEVBQUUsNEJBQTRCLEVBQ25GLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUM1QyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDOUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQzVDLENBQUM7UUFFRixNQUFNLFlBQVksQ0FBQyxJQUFJLDZCQUE2QixFQUFFLEVBQUUsOEJBQThCLEVBQ3JGLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUM1QyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDNUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQzVDLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLElBQUksRUFBRTtRQUVqQyxNQUFNLFlBQVksQ0FBQyxJQUFJLDBCQUEwQixFQUFFLEVBQUUsU0FBUyxFQUM3RCxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNO1FBQzdCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLFNBQVM7UUFDaEMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ3JCLENBQUM7UUFFRixNQUFNLFlBQVksQ0FBQyxJQUFJLDBCQUEwQixFQUFFLEVBQUUsU0FBUyxFQUM3RCxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDckIsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ3JCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNyQixDQUFDO1FBRUYsTUFBTSxZQUFZLENBQUMsSUFBSSwwQkFBMEIsRUFBRSxFQUFFLFNBQVMsRUFDN0QsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ3JCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUNyQixJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDckIsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDBDQUEwQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBRTNELE1BQU0sWUFBWSxDQUFDLElBQUksMEJBQTBCLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUNsRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDckIsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ3JCLENBQUM7UUFFRixNQUFNLFlBQVksQ0FBQyxJQUFJLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFDbEUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ3JCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNyQixDQUFDO1FBRUYsTUFBTSxZQUFZLENBQUMsSUFBSSwwQkFBMEIsQ0FBQyxLQUFLLENBQUMsRUFBRSxTQUFTLEVBQ2xFLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUNyQixJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDckIsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDZFQUE2RSxFQUFFLEtBQUs7UUFFeEYsTUFBTSxZQUFZLENBQUMsSUFBSSwwQkFBMEIsRUFBRSxFQUFFLHNCQUFzQixFQUMxRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDckIsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQ3RCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUN0QixDQUFDO1FBRUYsTUFBTSxZQUFZLENBQUMsSUFBSSwwQkFBMEIsRUFBRSxFQUFFLHNCQUFzQixFQUMxRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFDdEIsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQ3RCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUN0QixDQUFDO1FBRUYsTUFBTSxZQUFZLENBQUMsSUFBSSwwQkFBMEIsRUFBRSxFQUFFLHNCQUFzQixFQUMxRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFDdEIsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQ3RCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUN0QixDQUFDO1FBRUYsTUFBTSxZQUFZLENBQUMsSUFBSSwwQkFBMEIsRUFBRSxFQUFFLHNCQUFzQixFQUMxRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFDdEIsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQ3RCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUN0QixDQUFDO1FBRUYsTUFBTSxZQUFZLENBQUMsSUFBSSwwQkFBMEIsRUFBRSxFQUFFLHNCQUFzQixFQUMxRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFDdEIsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQ3RCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUN0QixDQUFDO1FBRUYsTUFBTSxZQUFZLENBQUMsSUFBSSwwQkFBMEIsRUFBRSxFQUFFLHNCQUFzQixFQUMxRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFDdEIsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQ3RCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUN0QixDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsbUZBQW1GLEVBQUUsS0FBSztRQUU5RixNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUNuQyxzQkFBc0I7Z0JBQ3JCLE9BQU8sQ0FBQzt3QkFDUCxFQUFFLEtBQUssRUFBRSxFQUFFLGVBQWUsRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxhQUFhLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsRUFBRTt3QkFDbkYsRUFBRSxLQUFLLEVBQUUsRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsYUFBYSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUU7d0JBQ2xGLEVBQUUsS0FBSyxFQUFFLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFO3FCQUNqRixDQUFDLENBQUM7WUFDSixDQUFDO1NBQ0QsQ0FBQyxDQUFDO1FBRUgsTUFBTSx5QkFBeUIsQ0FBQyxDQUFDLFlBQVksRUFBRSxhQUFhLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtZQUMxRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNO1lBQzdCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLFVBQVU7WUFDbEMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSTtTQUM3QixDQUFDLENBQUM7UUFFSCxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDZixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxtRUFBbUUsRUFBRSxLQUFLO1FBRTlFLE1BQU0sWUFBWSxDQUFDLElBQUksMEJBQTBCLEVBQUUsRUFBRSxjQUFjLEVBQ2xFLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUNyQixJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFDdEIsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQ3RCLENBQUM7UUFFRixNQUFNLFlBQVksQ0FBQyxJQUFJLDBCQUEwQixFQUFFLEVBQUUsY0FBYyxFQUNsRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFDdEIsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQ3RCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUN0QixDQUFDO1FBRUYsTUFBTSxZQUFZLENBQUMsSUFBSSwwQkFBMEIsRUFBRSxFQUFFLGNBQWMsRUFDbEUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ3JCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUN0QixJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDdEIsQ0FBQztRQUVGLE1BQU0sWUFBWSxDQUFDLElBQUksMEJBQTBCLEVBQUUsRUFBRSxjQUFjLEVBQ2xFLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUN0QixJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFDdEIsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQ3RCLENBQUM7UUFFRixNQUFNLFlBQVksQ0FBQyxJQUFJLDBCQUEwQixFQUFFLEVBQUUsY0FBYyxFQUNsRSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDckIsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQ3RCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUN0QixDQUFDO1FBRUYsTUFBTSxZQUFZLENBQUMsSUFBSSwwQkFBMEIsRUFBRSxFQUFFLGNBQWMsRUFDbEUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQ3RCLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUN0QixJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDdEIsQ0FBQztRQUVGLE1BQU0sWUFBWSxDQUFDLElBQUksMEJBQTBCLEVBQUUsRUFBRSxhQUFhLEVBQ2pFLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUN0QixJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFDdEIsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQ3RCLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDIn0=
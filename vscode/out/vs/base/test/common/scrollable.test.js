/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import assert from 'assert';
import { SmoothScrollingOperation } from '../../common/scrollable.js';
import { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';
class TestSmoothScrollingOperation extends SmoothScrollingOperation {
    constructor(from, to, viewportSize, startTime, duration) {
        duration = duration + 10;
        startTime = startTime - 10;
        super({ scrollLeft: 0, scrollTop: from, width: 0, height: viewportSize }, { scrollLeft: 0, scrollTop: to, width: 0, height: viewportSize }, startTime, duration);
    }
    testTick(now) {
        return this._tick(now);
    }
}
suite('SmoothScrollingOperation', () => {
    const VIEWPORT_HEIGHT = 800;
    const ANIMATION_DURATION = 125;
    const LINE_HEIGHT = 20;
    ensureNoDisposablesAreLeakedInTestSuite();
    function extractLines(scrollable, now) {
        const scrollTop = scrollable.testTick(now).scrollTop;
        const scrollBottom = scrollTop + VIEWPORT_HEIGHT;
        const startLineNumber = Math.floor(scrollTop / LINE_HEIGHT);
        const endLineNumber = Math.ceil(scrollBottom / LINE_HEIGHT);
        return [startLineNumber, endLineNumber];
    }
    function simulateSmoothScroll(from, to) {
        const scrollable = new TestSmoothScrollingOperation(from, to, VIEWPORT_HEIGHT, 0, ANIMATION_DURATION);
        const result = [];
        let resultLen = 0;
        result[resultLen++] = extractLines(scrollable, 0);
        result[resultLen++] = extractLines(scrollable, 25);
        result[resultLen++] = extractLines(scrollable, 50);
        result[resultLen++] = extractLines(scrollable, 75);
        result[resultLen++] = extractLines(scrollable, 100);
        result[resultLen++] = extractLines(scrollable, 125);
        return result;
    }
    function assertSmoothScroll(from, to, expected) {
        const actual = simulateSmoothScroll(from, to);
        assert.deepStrictEqual(actual, expected);
    }
    test('scroll 25 lines (40 fit)', () => {
        assertSmoothScroll(0, 500, [
            [5, 46],
            [14, 55],
            [20, 61],
            [23, 64],
            [24, 65],
            [25, 65],
        ]);
    });
    test('scroll 75 lines (40 fit)', () => {
        assertSmoothScroll(0, 1500, [
            [15, 56],
            [44, 85],
            [62, 103],
            [71, 112],
            [74, 115],
            [75, 115],
        ]);
    });
    test('scroll 100 lines (40 fit)', () => {
        assertSmoothScroll(0, 2000, [
            [20, 61],
            [59, 100],
            [82, 123],
            [94, 135],
            [99, 140],
            [100, 140],
        ]);
    });
    test('scroll 125 lines (40 fit)', () => {
        assertSmoothScroll(0, 2500, [
            [16, 57],
            [29, 70],
            [107, 148],
            [119, 160],
            [124, 165],
            [125, 165],
        ]);
    });
    test('scroll 500 lines (40 fit)', () => {
        assertSmoothScroll(0, 10000, [
            [16, 57],
            [29, 70],
            [482, 523],
            [494, 535],
            [499, 540],
            [500, 540],
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYWJsZS50ZXN0LmpzIiwic291cmNlUm9vdCI6ImZpbGU6Ly8vVXNlcnMvbWFobW9vZGFiZHVsbW9uaWVtL0Rlc2t0b3AvdmFsaW5vci1WL3ZzY29kZS9zcmMvIiwic291cmNlcyI6WyJ2cy9iYXNlL3Rlc3QvY29tbW9uL3Njcm9sbGFibGUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O2dHQUdnRztBQUVoRyxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFFLHdCQUF3QixFQUF5QixNQUFNLDRCQUE0QixDQUFDO0FBQzdGLE9BQU8sRUFBRSx1Q0FBdUMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVyRSxNQUFNLDRCQUE2QixTQUFRLHdCQUF3QjtJQUVsRSxZQUFZLElBQVksRUFBRSxFQUFVLEVBQUUsWUFBb0IsRUFBRSxTQUFpQixFQUFFLFFBQWdCO1FBQzlGLFFBQVEsR0FBRyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLFNBQVMsR0FBRyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBRTNCLEtBQUssQ0FDSixFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsRUFDbEUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEVBQ2hFLFNBQVMsRUFDVCxRQUFRLENBQ1IsQ0FBQztJQUNILENBQUM7SUFFTSxRQUFRLENBQUMsR0FBVztRQUMxQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQztDQUVEO0FBRUQsS0FBSyxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtJQUV0QyxNQUFNLGVBQWUsR0FBRyxHQUFHLENBQUM7SUFDNUIsTUFBTSxrQkFBa0IsR0FBRyxHQUFH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Q0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7UUFDdEMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRTtZQUMzQixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDUixDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUM7WUFDVCxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUM7WUFDVCxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUM7WUFDVCxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUM7WUFDVCxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7U0FDVixDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7UUFDdEMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRTtZQUMzQixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDUixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDUixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7WUFDVixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7WUFDVixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7WUFDVixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7U0FDVixDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7UUFDdEMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRTtZQUM1QixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDUixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDUixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7WUFDVixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7WUFDVixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7WUFDVixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7U0FDVixDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUVKLENBQUMsQ0FBQyxDQUFDIn0=
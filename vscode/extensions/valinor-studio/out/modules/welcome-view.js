"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WelcomeViewProvider = void 0;
const vscode = __importStar(require("vscode"));
const path = __importStar(require("path"));
class WelcomeViewProvider {
    constructor(_extensionUri) {
        this._extensionUri = _extensionUri;
    }
    resolveWebviewView(webviewView, context, _token) {
        this._view = webviewView;
        webviewView.webview.options = {
            enableScripts: true,
            localResourceRoots: [
                this._extensionUri
            ]
        };
        webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);
        // Handle messages from webview
        webviewView.webview.onDidReceiveMessage(message => {
            switch (message.command) {
                case 'importRFP':
                    vscode.commands.executeCommand('valinorStudio.importRFP');
                    break;
                case 'openChat':
                    vscode.commands.executeCommand('valinorStudio.openChat');
                    break;
                case 'newProposal':
                    this.createNewProposal();
                    break;
                case 'startWalkthrough':
                    this.startWalkthrough();
                    break;
                case 'showQuickStart':
                    this.showQuickStart();
                    break;
                case 'openDocumentation':
                    vscode.env.openExternal(vscode.Uri.parse('https://valinor-studio.com/docs'));
                    break;
            }
        });
    }
    async createNewProposal() {
        const workspaceFolder = vscode.workspace.workspaceFolders?.[0];
        if (!workspaceFolder) {
            vscode.window.showErrorMessage('Please open a workspace folder first');
            return;
        }
        const proposalPath = path.join(workspaceFolder.uri.fsPath, 'proposal.md');
        try {
            // Check if proposal.md already exists
            if (await vscode.workspace.fs.stat(vscode.Uri.file(proposalPath))) {
                const answer = await vscode.window.showWarningMessage('proposal.md already exists. Do you want to open it?', 'Open Existing', 'Create New');
                if (answer === 'Open Existing') {
                    const document = await vscode.workspace.openTextDocument(proposalPath);
                    await vscode.window.showTextDocument(document);
                    return;
                }
            }
            // Create new proposal.md with template
            const template = this.getProposalTemplate();
            await vscode.workspace.fs.writeFile(vscode.Uri.file(proposalPath), Buffer.from(template, 'utf8'));
            const document = await vscode.workspace.openTextDocument(proposalPath);
            await vscode.window.showTextDocument(document);
            vscode.window.showInformationMessage('‚úÖ New proposal.md created successfully!');
        }
        catch (error) {
            vscode.window.showErrorMessage(`‚ùå Error creating proposal: ${error}`);
        }
    }
    getProposalTemplate() {
        return `# Government Proposal

## Executive Summary

[Your executive summary will be generated here]

## Background

[Background information will be generated here]

## Technical Approach

[Technical approach will be generated here]

## Requirements Analysis

[Requirements analysis will be generated here]

## Compliance Matrix

[Compliance matrix will be generated here]

## Pricing

[Pricing information will be generated here]

## Team & Experience

[Team and experience information will be generated here]

## Risk Management

[Risk management plan will be generated here]

## Quality Assurance

[Quality assurance plan will be generated here]

---
*Generated by Valinor Studio - AI-Powered Government Proposal Assistant*
`;
    }
    async startWalkthrough() {
        // Start the walkthrough
        await vscode.commands.executeCommand('workbench.action.openWalkthrough', 'valinorStudio.walkthrough');
    }
    async showQuickStart() {
        const quickStartContent = `# üöÄ Valinor Studio Quick Start

## 3 Simple Steps to Success

### 1. üì• Import RFP
- Use **Ctrl+Shift+P** ‚Üí "Import RFP"
- Or click the big "Import RFP" button above
- Enter the Notice ID from SAM.gov

### 2. ü§ñ Generate Content
- Right-click on any ## heading in proposal.md
- Select "Generate Section Content"
- Or use the chat to ask for specific content

### 3. ‚úÖ Review & Refine
- Use the chat to ask questions about your proposal
- Validate pricing with live market data
- Add comments for team collaboration

## Pro Tips
- **Alt+Cmd+I**: Quick Import RFP
- **Alt+Cmd+G**: Generate current section
- **Ctrl+Shift+V**: Open chat
- Right-click prices to validate them
- Use the Comments panel for team feedback

## Need Help?
- Check the Documentation
- Use the Chat for AI assistance
- Join our community forum

Happy proposing! üéØ`;
        const document = await vscode.workspace.openTextDocument({
            content: quickStartContent,
            language: 'markdown'
        });
        await vscode.window.showTextDocument(document, { preview: false });
    }
    _getHtmlForWebview(webview) {
        // Use the existing logo in the media folder
        const logoUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'icon.png'));
        return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome to Valinor Studio</title>
    <script src="https://unpkg.com/@phosphor-icons/web"></script>
    <style>
        :root {
            --primary: #4f8cff;
            --primary-dark: #357ae8;
            --background: linear-gradient(135deg, #181c20 0%, #23272b 100%);
            --surface: #23272b;
            --text: #fff;
            --text-muted: #b0b8c1;
            --shadow: 0 8px 32px rgba(0,0,0,0.18);
            --radius: 18px;
            --font: 'Inter', 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
        }
        html, body {
            height: 100%;
        }
        body {
            min-height: 100vh;
            background: var(--background);
            color: var(--text);
            font-family: var(--font);
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .welcome-root {
            width: 100vw;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            padding-top: 48px;
        }
        .welcome-hero {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 32px;
        }
        .logo {
            width: 72px;
            height: 72px;
            margin-bottom: 20px;
            filter: drop-shadow(0 2px 8px rgba(79,140,255,0.18));
        }
        h1 {
            font-size: 2.2rem;
            font-weight: 700;
            margin-bottom: 8px;
            letter-spacing: -1px;
        }
        .tagline {
            color: var(--text-muted);
            font-size: 1.15rem;
            margin-bottom: 18px;
        }
        .action-cards {
            display: flex;
            flex-wrap: wrap;
            gap: 24px;
            justify-content: center;
            margin-bottom: 36px;
        }
        .action-card {
            background: rgba(35,39,43,0.98);
            border-radius: 16px;
            box-shadow: var(--shadow);
            padding: 32px 28px 24px 28px;
            min-width: 210px;
            max-width: 240px;
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: box-shadow 0.2s, transform 0.2s;
            cursor: pointer;
            border: 1.5px solid transparent;
        }
        .action-card:hover {
            box-shadow: 0 8px 32px rgba(79,140,255,0.22);
            border: 1.5px solid var(--primary);
            transform: translateY(-4px) scale(1.03);
        }
        .ph {
            font-size: 2.2rem;
            color: var(--primary);
            margin-bottom: 12px;
        }
        .action-title {
            font-size: 1.18rem;
            font-weight: 600;
            margin-bottom: 6px;
        }
        .action-desc {
            color: var(--text-muted);
            font-size: 0.98rem;
            margin-bottom: 18px;
            text-align: center;
        }
        .action-btn {
            background: var(--primary);
            color: #fff;
            border: none;
            border-radius: 8px;
            padding: 10px 28px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            box-shadow: 0 2px 8px rgba(79,140,255,0.10);
            transition: background 0.2s, box-shadow 0.2s, transform 0.1s;
        }
        .action-btn:hover, .action-btn:focus {
            background: var(--primary-dark);
            box-shadow: 0 4px 16px rgba(79,140,255,0.18);
            transform: translateY(-2px) scale(1.03);
        }
        .features-section {
            margin-top: 18px;
            margin-bottom: 24px;
            width: 100%;
            max-width: 700px;
        }
        .features-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--text-muted);
            margin-bottom: 10px;
            text-align: center;
        }
        .features-list {
            display: flex;
            flex-wrap: wrap;
            gap: 18px;
            justify-content: center;
        }
        .feature {
            background: rgba(35,39,43,0.92);
            border-radius: 12px;
            padding: 16px 22px;
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.02rem;
            color: var(--text);
            box-shadow: 0 2px 8px rgba(79,140,255,0.08);
            font-weight: 500;
        }
        .feature .ph {
            font-size: 1.4rem;
            color: var(--primary);
            margin-bottom: 0;
        }
        footer {
            margin-top: 32px;
            text-align: center;
            color: var(--text-muted);
            font-size: 0.98rem;
        }
        footer a {
            color: var(--primary);
            text-decoration: none;
            margin: 0 4px;
            transition: color 0.2s;
        }
        footer a:hover {
            color: var(--primary-dark);
            text-decoration: underline;
        }
        @media (max-width: 900px) {
            .action-cards {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>
</head>
<body>
    <div class="welcome-root">
        <div class="welcome-hero">
            <img src="${logoUri}" alt="Valinor Studio Logo" class="logo" onerror="this.style.display='none'" />
            <h1>Welcome to Valinor Studio</h1>
            <div class="tagline">Your AI-powered government contract assistant</div>
        </div>
        <div class="action-cards">
            <div class="action-card" onclick="acquireVsCodeApi().postMessage({ command: 'importRFP' })">
                <i class="ph ph-file-arrow-down"></i>
                <div class="action-title">Import RFP</div>
                <div class="action-desc">Bring in government contracts from SAM.gov and start your proposal journey.</div>
                <button class="action-btn">Import Now</button>
            </div>
            <div class="action-card" onclick="acquireVsCodeApi().postMessage({ command: 'openChat' })">
                <i class="ph ph-chat-circle-dots"></i>
                <div class="action-title">Open Chat</div>
                <div class="action-desc">Ask AI questions, get insights, and collaborate with your team.</div>
                <button class="action-btn">Open Chat</button>
            </div>
            <div class="action-card" onclick="acquireVsCodeApi().postMessage({ command: 'newProposal' })">
                <i class="ph ph-file-plus"></i>
                <div class="action-title">New Proposal</div>
                <div class="action-desc">Start a new proposal with a ready-to-edit template.</div>
                <button class="action-btn">Create Proposal</button>
            </div>
            <div class="action-card" onclick="acquireVsCodeApi().postMessage({ command: 'showQuickStart' })">
                <i class="ph ph-lightbulb"></i>
                <div class="action-title">Quick Start</div>
                <div class="action-desc">Learn how to use Valinor Studio in 3 simple steps.</div>
                <button class="action-btn">Quick Start</button>
            </div>
            <div class="action-card" onclick="acquireVsCodeApi().postMessage({ command: 'openDocumentation' })">
                <i class="ph ph-book-open"></i>
                <div class="action-title">Docs</div>
                <div class="action-desc">Read the documentation and explore advanced features.</div>
                <button class="action-btn">Read Docs</button>
            </div>
        </div>
        <div class="features-section">
            <div class="features-title">Why Valinor Studio?</div>
            <div class="features-list">
                <div class="feature"><i class="ph ph-brain"></i> AI-Powered Analysis</div>
                <div class="feature"><i class="ph ph-currency-dollar"></i> Live Pricing Validation</div>
                <div class="feature"><i class="ph ph-users"></i> Team Collaboration</div>
                <div class="feature"><i class="ph ph-shield-check"></i> Compliance Automation</div>
            </div>
        </div>
        <footer>
            Need help? <a href="#" onclick="acquireVsCodeApi().postMessage({ command: 'openDocumentation' })">Read the Docs</a> or <a href='https://valinor-studio.com/support' target='_blank'>Contact Support</a>
        </footer>
    </div>
    <script>
        function acquireVsCodeApi() {
            if (window.acquireVsCodeApi) return window.acquireVsCodeApi();
            return { postMessage: () => {} };
        }
        // Make the entire card clickable, but not the button
        document.querySelectorAll('.action-card').forEach(card => {
            card.addEventListener('click', function(e) {
                if (e.target.classList.contains('action-btn')) {
                    // Let the button handle the click
                    return;
                }
                // Otherwise, trigger the button click
                this.querySelector('.action-btn').click();
            });
        });
        // Button click handlers
        document.querySelectorAll('.action-card').forEach(card => {
            card.querySelector('.action-btn').addEventListener('click', function(e) {
                e.stopPropagation();
                // Find the parent card and trigger its click
                card.click();
            });
        });
    </script>
</body>
</html>`;
    }
}
exports.WelcomeViewProvider = WelcomeViewProvider;
WelcomeViewProvider.viewType = 'valinorStudio.welcome';
//# sourceMappingURL=welcome-view.js.map